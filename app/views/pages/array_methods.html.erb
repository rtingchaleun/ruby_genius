<div id="content">
  <div class="row">

    <!-- Table of Contents - Desktop -->
    <div id="table-of-contents" class="col l3 m3 hide-on-small-only">
      <div class="collection with-header">
        <div class="collection-header"><h6>Accessor Methods</h6></div>
        <a href="#min" class="collection-item">.min</a>
        <a href="#max" class="collection-item">.max</a>
        <a href="#minmax" class="collection-item">.minmax</a>
        <a href="#count" class="collection-item">.count</a>
        <div class="collection-header"><h6>Subset Methods</h6></div>
        <a href="#first" class="collection-item">.first</a>
        <a href="#drop" class="collection-item">.drop</a>
        <a href="#last" class="collection-item">.last</a>
        <a href="#find" class="collection-item">.find</a>
        <a href="#find_index" class="collection-item">.find_index</a>
        <a href="#find_all" class="collection-item">.find_all</a>
        <a href="#reject" class="collection-item">.reject</a>
        <div class="collection-header"><h6>Mutator Methods</h6></div>
        <a href="#sort" class="collection-item">.sort</a>
        <a href="#reverse" class="collection-item">.reverse</a>
        <div class="collection-header"><h6>Iterator Methods</h6></div>
        <a href="#each" class="collection-item">.each</a>
        <a href="#each_with_index" class="collection-item">.each_with_index</a>
        <a href="#reduce" class="collection-item">.reduce</a>
        <a href="#map" class="collection-item">.map</a>
        <div class="collection-header"><h6>Boolean Methods</h6></div>
        <a href="#all" class="collection-item">.all?</a>
        <a href="#any" class="collection-item">.any?</a>
        <a href="#none" class="collection-item">.none?</a>
      </div>
    </div>

    <!-- Table of Contents - Mobile -->
    <ul class="sidenav" id="mobile-toc">
      <div class="collection-header"><h6>Accessor Methods</h6></div>
      <li><a href="#min" class="collection-item">.min</a></li>
      <li><a href="#max" class="collection-item">.max</a></li>
      <li><a href="#minmax" class="collection-item">.minmax</a></li>
      <li><a href="#count" class="collection-item">.count</a></li>
      <div class="collection-header"><h6>Subset Methods</h6></div>
      <li><a href="#first" class="collection-item">.first</a></li>
      <li><a href="#drop" class="collection-item">.drop</a></li>
      <li><a href="#last" class="collection-item">.last</a></li>
      <li><a href="#find" class="collection-item">.find</a></li>
      <li><a href="#find_index" class="collection-item">.find_index</a></li>
      <li><a href="#find_all" class="collection-item">.find_all</a></li>
      <li><a href="#reject" class="collection-item">.reject</a></li>
      <div class="collection-header"><h6>Mutator Methods</h6></div>
      <li><a href="#sort" class="collection-item">.sort</a></li>
      <li><a href="#reverse" class="collection-item">.reverse</a></li>
      <div class="collection-header"><h6>Iterator Methods</h6></div>
      <li><a href="#each" class="collection-item">.each</a></li>
      <li><a href="#each_with_index" class="collection-item">.each_with_index</a></li>
      <li><a href="#reduce" class="collection-item">.reduce</a></li>
      <li><a href="#map" class="collection-item">.map</a></li>
      <div class="collection-header"><h6>Boolean Methods</h6></div>
      <li><a href="#all" class="collection-item">.all?</a></li>
      <li><a href="#any" class="collection-item">.any?</a></li>
      <li><a href="#none" class="collection-item">.none?</a></li>
    </ul>

    <div id="main-article" class="col l7 push-l4 m8 push-m3 s10 push-s1">
      <div class="content row">

        <!-- Trigger - Mobile Table of Contents -->
        <div class="fixed-action-btn">
          <a href="#" data-target="mobile-toc" class="sidenav-trigger btn-floating btn-large waves-effect waves-light red hide-on-med-and-up"><i class="material-icons">toc</i></a>
        </div>

        <h4><b>Array Methods</b></h4>
        <p>Reference: <a href="https://ruby-doc.org/core-2.6.4/Enumerable.html">Official Ruby Docs</a></p>

        <h5 id="title-goals">Accessor Methods</h5>
        <p>Accessor methods return a new value or representation of the array.</p>

        <h5 id="min"><span class="code">.min</span></h5>
        <p>Returns the item that qualifies as the "minimum".</p>

        <code><span class="comment"># find the lowest number:</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">min</span>  <span class="comment">#=> -99</span>
        </code>

        <h5 id="max"><span class="code">.max</span></h5>
        <p>Returns the item that qualifies as the "maximum".</p>

        <code><span class="comment"># find the highest number:</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">max</span>  <span class="comment">#=> 5</span>
        </code>

        <h5 id="minmax"><span class="code">.minmax</span></h5>
        <p>Returns a 2-element array consisting of the minimum and maximum values.</p>

        <code><span class="comment"># find the lowest and highest number:</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">minmax</span>  <span class="comment">#=> [-99, 5]</span>
        </code>

        <h5 id="count"><span class="code">.count</span></h5>
        <p>Returns how many elements match the given criteria.</p>

        <code><span class="comment"># count all elements</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">count</span>  <span class="comment">#=> 5</span>

          <span class="comment"># count even numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">count</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> 2</span>

          <span class="comment"># count numbers divisible by 5</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">count</span>{ |num| num % <span class="num">5</span> == <span class="num">0</span> } <span class="comment">#=> 2</span>
        </code>

        <h5 id="title-goals">Subset Methods</h5>
        <p>Subset methods return a subset of the array.</p>

        <h5 id="first"><span class="code">.first</span></h5>
        <p>Returns the first <b><i>n</i></b> elements.</p>

        <code><span class="comment"># get the first number</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">first</span>  <span class="comment">#=> 5</span>

          <span class="comment"># get the first 2 numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">first</span>(<span class="num">2</span>)  <span class="comment">#=> [5, 2]</span>
        </code>

        <h5 id="drop"><span class="code">.drop</span></h5>
        <p>Returns everything except the first <b><i>n</i></b> elements.</p>

        <code><span class="comment"># drop the first two numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">drop</span>(<span class="num">2</span>)  <span class="comment">#=> [0, -3, -99]</span>
        </code>

        <h5 id="last"><span class="code">.last</span></h5>
        <p>Returns the last <b><i>n</i></b> elements.</p>

        <code><span class="comment"># get the last number</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">last</span>  <span class="comment">#=> [-99]</span>

          <span class="comment"># get the last two numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">last</span>(<span class="num">2</span>)  <span class="comment">#=> [-3, -99]</span>
        </code>

        <h5 id="find"><span class="code">.find</span></h5>
        <p>Returns the first element for which the given block returns true.</p>

        <code><span class="comment"># find first even number</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">find</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> 2</span>

          <span class="comment"># find first number divisible by 3</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">find</span>{ |num| num % <span class="num">3</span> == <span class="num">0</span> }  <span class="comment">#=> 0</span>
        </code>

        <h5 id="find_index"><span class="code">.find_index</span></h5>
        <p>Returns the index of the first element for which the given block returns true.</p>

        <code><span class="comment"># find index of first even number</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">find_index</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> 1</span>

          <span class="comment"># find index of first number divisible by 3</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">find_index</span>{ |num| num % <span class="num">3</span> == <span class="num">0</span> }  <span class="comment">#=> 2</span>
        </code>

        <h5 id="find_all"><span class="code">.find_all</span> / <span class="code">.select</span></h5>
        <p>Returns a new array of only the elements for which the given block returns true. It's the simplest way to filter an array in Ruby.</p>

        <code><span class="comment"># find all even numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">find_all</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> [2, 0]</span>
          numbers.<span class="method">select</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> [2, 0]</span>

          <span class="comment"># find all numbers divisible by 3</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">find_all</span>{ |num| num % <span class="num">3</span> == <span class="num">0</span> }  <span class="comment">#=> [0, -3, -99]</span>
          numbers.<span class="method">select</span>{ |num| num % <span class="num">3</span> == <span class="num">0</span> }  <span class="comment">#=> [0, -3, -99]</span>
        </code>

        <h5 id="reject"><span class="code">.reject</span></h5>
        <p>Returns a new array of the elements for which the given block returns false. This is the opposite of the <b>.find_all</b> and <b>.select</b></span> method. </p>

        <code><span class="comment"># find all odd numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">reject</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> [5, -3, -99]</span>

          <span class="comment"># find all negative numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">reject</span>{ |num| num >= <span class="num">0</span> }  <span class="comment">#=> [-3, -99]</span>
        </code>

        <h5 id="slice"><span class="code">.slice</span></h5>
        <p>Takes two parameters and returns a subset of the array. The first parameter specifies what index to start at and the second parements specifies the number of elements to slice.</p>

        <code><span class="comment"># slice 3 elements starting from index 0</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">slice</span>(0, 3)  <span class="comment">#=> [5, 2, 0]</span>

          <span class="comment"># slice 2 elements starting from index 3</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">slice</span>(3, 2)  <span class="comment">#=> [-3, -99]</span>

          <span class="comment"># slice 1 element starting from index 3</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">slice</span>(3)  <span class="comment">#=> -3</span>
        </code>

        <h5 id="title-goals">Mutator Methods</h5>
        <p>Mutator methods change the array.</p>

        <h5 id="sort"><span class="code">.sort</span></h5>
        <p>Returns a new collection, sorted.</p>

        <code><span class="comment"># sort an array of numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">sort</span>  <span class="comment">#=> [-99, -3, 0, 2, 5]</span>
        </code>

        <h5 id="reverse"><span class="code">.reverse</span></h5>
        <p>Returns an array, reversed.</p>

        <code><span class="comment"># reverse an array of numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">reverse</span>  <span class="comment">#=> [-99, -3, 0, 2, 5]</span>
        </code>

        <h5 id="title-goals">Iterator Methods</h5>
        <p>Iterator methods are similar to loops.</p>

        <h5 id="each"><span class="code">.each</span></h5>
        <p>Yields each element in a collection, one after another, to a given block.</p>

        <code><span class="comment"># print all numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">each</span>{ |num| print "#{num}, " }  <span class="comment">#=> 5, 2, 0, -3, -99</span>
        </code>

        <h5 id="each_with_index"><span class="code">.each_with_index</span></h5>
        <p>Yields each element in a collection along with its index number, one after another, to a given block.</p>

        <code><span class="comment"># print all numbers with its index</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">each_with_index</span>{ |num, index| puts "#{num}, #{index}" }
          <span class="comment"># output</span>
          <span class="comment"># 5, 0</span>
          <span class="comment"># 2, 1</span>
          <span class="comment"># 0, 2</span>
          <span class="comment"># -3, 3</span>
          <span class="comment"># -99, 4</span>
        </code>

        <h5 id="reduce"><span class="code">.reduce</span> / <span class="code">.inject</span></h5>
        <p>Returns an aggregate value by combining all the elements in an array.</p>

        <code><span class="comment"># sum of all the numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">reduce</span>(:+)  <span class="comment">#=> -95</span>

          <span class="comment"># multiply all the numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">reduce</span>{ |sum, num| sum * num }  <span class="comment">#=> 0</span>
        </code>

        <h5 id="map"><span class="code">.map</span></h5>
        <p>Yields each item to a given block, and returns a new array of the results.</p>

        <code><span class="comment"># all numbers multiplied by two</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">map</span>{ |num| num * 2}  <span class="comment">#=> [10, 4, 0, -6, -198]</span>

          <span class="comment"># the even status for all numbers</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">map</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> [false, true, true, false, false]</span>
        </code>

        <h5 id="title-goals">Boolean Methods</h5>
        <p>Boolean methods return a true or false.</p>

        <h5 id="all"><span class="code">.all?</span></h5>
        <p>Yields each item to a given block and returns true only if every element meets the condition.</p>

        <code><span class="comment"># are all numbers even?</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">all?</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> false</span>

          <span class="comment"># are all numbers positive?</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">all?</span>{ |num| num >= <span class="num">0</span> }  <span class="comment">#=> false</span>
        </code>

        <h5 id="any"><span class="code">.any?</span></h5>
        <p>Yields each item to a given block and returns true if at least one element meets the condition.</p>

        <code><span class="comment"># any of the numbers even?</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">all?</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> true</span>

          <span class="comment"># any of the numbers 15?</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">all?</span>(15)  <span class="comment">#=> false</span>

          <span class="comment"># any of the numbers divisible by 5?</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">all?</span>{ |num| num %  <span class="num">5</span> ==  <span class="num">0</span> }  <span class="comment">#=> true</span>
        </code>

        <h5 id="none"><span class="code">.none?</span></h5>
        <p>Yields each item to a given block and returns true if none of the elements meet the condition.</p>

        <code><span class="comment"># none of the numbers are even?</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">none?</span>(&:<span class="green-text">even?</span>)  <span class="comment">#=> false</span>

          <span class="comment"># none of the numbers are 15?</span>
          numbers = [ <span class="num">5</span>, <span class="num">2</span>, <span class="num">0</span>, <span class="num">-3</span>, <span class="num">-99</span> ]
          numbers.<span class="method">none?</span>{ |num| num == <span class="num">15</span> }  <span class="comment">#=> true</span>
        </code>

        <h5 id="title-play">Contribute to this open-source project</h5>
        <a href="https://github.com/rtingchaleun/Rons-Ruby-Docs" target="_blank">https://github.com/rtingchaleun/ruby_genius</a>
      </div>
    </div>
    <!--
    <div id="related-articles" class="col l3 push-l3 m8 push-m3 s10 push-s1">
      <div class="collection with-header">
        <div class="collection-header"><h6>Related Articles</h6></div>
        <a href="#!" class="collection-item">Sudoku Solver</a>
        <a href="#!" class="collection-item">Sudoku Generator</a>
      </div>
    </div>
    -->
  </div>
</div>
